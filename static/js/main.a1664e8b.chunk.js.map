{"version":3,"sources":["components/Header.js","components/Form.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","className","mode","href","title","type","id","about","placeholder","onClick","darkMode","htmlFor","darkText","Form","useState","text","setText","heading","value","onChange","event","console","log","target","rows","newText","toUpperCase","toLowerCase","split","join","length","About","color","backgroundColor","myStyle","setMyStyle","btnText","setBtnText","style","class","border","App","setMode","setDarkText","alert","setAlert","showAlert","Message","msg","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a1664e8b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Header.css\";\r\n// import {Link} from 'react-router-dom'\r\n// import reactDom from \"react-dom\";\r\n\r\nfunction Header(props) {\r\n  return (\r\n    <div className =\"app\">\r\n      <nav\r\n        className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n      >\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">\r\n            {props.title}\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                  Home\r\n                </a>\r\n              </li>\r\n\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"#\">\r\n                  {props.about}\r\n                </a>\r\n              </li>\r\n             \r\n                \r\n            <form className=\"d-flex\">\r\n              <input\r\n                className=\"form-control me-2\"\r\n                type=\"search\"\r\n                placeholder=\"Search\"\r\n                aria-label=\"Search\"\r\n              />\r\n              <button className=\"btn btn-outline-primary\" type=\"submit\">\r\n                Search\r\n              </button>\r\n            </form>\r\n          \r\n        \r\n        <div className=\"switch form-check form-switch\">\r\n          <input\r\n            className=\"form-check-input\"\r\n            type=\"checkbox\"\r\n            id=\"flexSwitchCheckDefault\"\r\n            onClick = {props.darkMode}\r\n           \r\n          />\r\n          <label\r\n            className={`form-check-label text-${props.mode === 'light'?'dark':'light'} `}\r\n            htmlFor=\"flexSwitchCheckDefault\"\r\n          >\r\n            {props.darkText}\r\n          </label>\r\n          </div>\r\n          </ul>\r\n        \r\n        </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nHeader.propTypes = {\r\n  title: PropTypes.string,\r\n  about: PropTypes.string,\r\n};\r\n\r\nexport default Header;\r\n","import React, {useState} from 'react'\r\nimport './form.css'\r\n\r\n\r\n\r\n\r\nexport default function Form(props) {\r\n\r\n  const[text,setText] = useState(\"Enter the text here\");\r\n\r\n\r\n  const handleOnClick=()=>{\r\n    console.log(\"uppercase is clicked\"+text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText)\r\n  }\r\n\r\n  const handleUpClick=()=>{\r\n    console.log(\"lowercase is clicked\"+text);\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n  }\r\n\r\n  const handleOnChange =(event)=>{\r\n        console.log(\"changed\")\r\n        setText(event.target.value)\r\n  }\r\n\r\n  const handleClearClick =()=>{\r\n    \r\n    setText(\" \");\r\n}\r\n\r\n\r\n\r\nconst handleExtraSpaces=()=>{\r\nlet newText = text.split(/[ ]+/);\r\nsetText(newText.join(\" \"))\r\n// setText(str.trim());\r\n}\r\n\r\n \r\n  return (\r\n    <>\r\n    <div>\r\n\r\n       <div className=\"my-3\">\r\n           <h1>{props.heading} </h1>\r\n          {/* <label for=\"my text\" className=\"form-label\">enter text here</label> */}\r\n          <textarea className=\"form-control\" value = {text} onChange={handleOnChange} id=\"my box\" rows=\"10\"></textarea>\r\n          <button className=\"btn-btn-primary\" onClick ={handleOnClick}>convert to uppercase</button>\r\n          <button className=\"btn-btn-primary\" onClick ={handleUpClick}>convert to lowrcase</button>\r\n          <button className=\"btn-btn-primary\" onClick ={handleClearClick}>clear text</button>\r\n           {/* <button className=\"btn-btn-primary\" onClick ={handleCopy}>copy text</button> */}\r\n          <button className=\"btn-btn-primary\" onClick ={handleExtraSpaces}>Remove Extra Spaces</button> \r\n          \r\n       </div>\r\n      \r\n    </div>\r\n\r\n    \r\n   <div className=\"container\">\r\n     <h1>Your Summary text</h1>\r\n     <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n     <p>{0.008* text.split(\" \").length } minutes to read</p>\r\n     <h2>Preview</h2>\r\n     <p>{text.length>0?text:\"Enter something in the text box above to preview here\"}</p>\r\n   </div>\r\n   \r\n    </>\r\n  )\r\n}\r\n\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function About() {\r\n  // let myStyle={\r\n  //     color: 'white',\r\n  //     backgroundColor: 'black'\r\n  // }\r\n\r\n  const [myStyle, setMyStyle] = useState({\r\n    color: \"black\",\r\n    backgroundColor: \"pink\",\r\n  });\r\n\r\n  const [btnText, setBtnText] = useState(\"Enable dark mode\");\r\n\r\n  const handleOnClick = () => {\r\n    if (myStyle.color === \"white\") {\r\n      setMyStyle({\r\n        color: \"black\",\r\n        backgroundColor: \"pink\",\r\n      });\r\n\r\n      setBtnText(\"Enable dark mode\");\r\n    } else {\r\n      setMyStyle({\r\n        color: \"white\",\r\n        backgroundColor: \"black\",\r\n        border: \"1px solid white\",\r\n      });\r\n      setBtnText(\"Enable light mode\");\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"container\" style={myStyle}>\r\n      <h1>About Us</h1>\r\n      <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n        <div className=\"accordion-item\" style={myStyle}>\r\n          <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button\r\n              className=\"accordion-button \"\r\n              style={myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n            >\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            class=\"accordion-collapse collapse show\"\r\n            aria-labelledby=\"headingOne\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\">\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={myStyle}>\r\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              style={myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n            >\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingTwo\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\">\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={myStyle}>\r\n          <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              style={myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n            >\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingThree\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\">\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"container my-3\">\r\n        <button\r\n          type=\"button\"\r\n          onClick={handleOnClick}\r\n          className=\"btn-btn-primary \"\r\n        >\r\n          {btnText}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","// import logo from \"./logo.svg\";\nimport React, { useState } from \"react\";\n\nimport Header from \"./components/Header\";\nimport Form from \"./components/Form\";\nimport About from \"./components/About\";\n// import Footer from \"./components/Footer\";\n// import Alert from \"./components/Alert\";\n// import React from \"react\";\n// import { BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [darkText, setDarkText] = useState(\"Enable dark mode\");\n  const [alert, setAlert] = useState(false);\n\n  const showAlert = (Message, type) => {\n    setAlert({\n      msg: Message,\n      type: type,\n    });\n  };\n\n  const darkMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      setDarkText(\"disable dark mode\");\n      showAlert(\"dark mode has been enabled\", \"sucess\");\n    } else {\n      setMode(\"light\");\n      setDarkText(\"Enable dark mode\");\n      document.body.style.backgroundColor = \" oldlace\";\n      showAlert(\"light mode has been enabled\", \"sucess\");\n    }\n  };\n\n  return (\n    <>\n      {/* <Router> */}\n    \n        <div className=\"my_app\">\n        <Header\n          title=\"textutils \"\n          about=\"about text\"\n          mode={mode}\n          darkMode={darkMode}\n          darkText={darkText}\n          alert={alert}\n        />\n        {/* <Alert alert= {alert}/> */}\n       \n        <div className=\"container my-3\">\n       \n        {/* <Switch>\n              <Route exact path=\"/\"> */}\n                <Form heading=\"Enter the text to analyse\" />\n              {/* </Route> */}\n\n              {/* <Route exact path=\"/about\"> */}\n             \n                <About className=\"about\" />\n                \n              {/* </Route> */}\n            {/* </Switch> */}\n\n            {/* <About /> */}\n            {/* <Footer/> */}\n            {/* </div> */}\n        </div>\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}